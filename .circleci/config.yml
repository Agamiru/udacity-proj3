version: 2.1

orbs:
  slack: circleci/slack@4.1

parameters:
  workflow_id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:0:7}

commands:
#   slack-notify-on-fail:
#     description: Notify via slack on fail
#     steps:
#       - slack/notify:
#           channel: C03NW4N9HDF
#           event: fail
#           template: basic_fail_1
            ##### yum install epel-release -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< pipeline.parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< pipeline.parameters.workflow_id >>"

  # notify-and-destroy:
  #   description: Notify via slack on-fail and destroy already created aws infrastructure
  #   steps:
  #     - slack-notify-on-fail
  #     - destroy-environment


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          key: frontend-build
          paths: [frontend/node_modules]

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          key: backend-build
          paths: [backend/node_modules]

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run unit tests for frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run unit tests for backend
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Dependencies audit for frontend
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Dependencies audit for backend
          command: |
            cd backend
            npm install
            npm install --save-dev webpack@5.73.0
            npm update mkdirp --depth 6
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow_id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow_id >>"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow_id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow_id >>"
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters Name=tag:Name,Values=backend-<< pipeline.parameters.workflow_id >> \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text | cat >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - ~/.circleci/ansible/inventory.txt

      # - slack/notify:
      #     channel: C03NW4N9HDF
      #     event: fail
      #     template: basic_fail_1

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1d:83:9d:af:35:e2:5b:9c:ae:3c:89:6b:43:be:ef:4e"] 

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk add --update ansible
            pip3 install --no-cache-dir awscli

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0

    parameters:
      kv-key:
        type: string
        default: xqzlp7yq
        
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install python3-pip
            pip3 --version
            pip3 install awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to keyvalue.immanuel.co
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "content-length: 0" -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/<< parameters.kv-key >>/migration_<< pipeline.parameters.workflow_id >>/1
            fi
     
      - destroy-environment
      
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Python and AWSCLI
          command: |
            sudo apt install python3-pip
            pip3 --version
            pip3 install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters Name=tag:Name,Values=backend-<< pipeline.parameters.workflow_id >> \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"<< pipeline.parameters.workflow_id >> ".tar.gz dist
            aws s3 cp dist s3://udapeople-<< pipeline.parameters.workflow_id >>  --recursive
      
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
          # filters:
          #   branches:
          #     only:
          #       - main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      
